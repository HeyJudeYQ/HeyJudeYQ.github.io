<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Class语法</title>
      <link href="/2019/07/03/ES6/"/>
      <url>/2019/07/03/ES6/</url>
      
        <content type="html"><![CDATA[<p>一、Class语法：<br>    Class在语法上更加贴合面向对象的写法；Class实现继承更易读、易理解；本质是语法糖，使用了prototype。</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ class Mathhandle&#123;</span><br><span class="line">    constructor(x,y)&#123;</span><br><span class="line">        this.x = x;</span><br><span class="line">        this.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">add</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> this.x + this.y</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  const mm = new Mathhandle(1,2);</span><br><span class="line">  console.log(mm.add());</span><br><span class="line"></span><br><span class="line">  typeof Mathhandle    //<span class="keyword">function</span></span><br><span class="line">  console.log(Mathhandle === Mathhandle.prototype.constructor); // <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>二、Class继承</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Animal&#123;</span><br><span class="line">    constructor(name)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">eat</span></span>()&#123;</span><br><span class="line">        console.log(this.name + <span class="string">'eat'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Dog extend Animal&#123;</span><br><span class="line">    constructor(name)&#123;</span><br><span class="line">        super(name)</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">say</span></span>()&#123;</span><br><span class="line">        console.log(`<span class="variable">$&#123;this.name&#125;</span> eat`)</span><br><span class="line">    &#125;</span><br><span class="line">    const dog = new Dog(<span class="string">'hashiqi'</span>);</span><br><span class="line">    dog.say();</span><br><span class="line">    dog.eat();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ES6、JavaScript、Class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise</title>
      <link href="/2019/06/19/promise/"/>
      <url>/2019/06/19/promise/</url>
      
        <content type="html"><![CDATA[<p>Promise是异步编程的一种解决方案，简单来说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。</p><!-- <Excerpt in index | 首页摘要>  --><a id="more"></a><p>语法上讲，Promise是一个对象，从它可以获取异步操作的消息。<br>Promise的两个特点：<br>    （1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。<br>    （2）一旦状态改变，就不会改变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。<br>一、Promise基本用法：<br>    1、Promise实例：<br>        Promise构造函数接受一个函数作为参数，该函数的两个函数分别是resolve和reject</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ const promise = new Promise(<span class="keyword">function</span>(resolve,reject)&#123;</span><br><span class="line">      // ... some code </span><br><span class="line">      <span class="keyword">if</span>(/*异步操作成功*/)&#123;</span><br><span class="line">        resolve(value);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        reject(error);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>Promise实例生成后，可以用 then方法分别指定resolved状态和rejected状态的回调函数。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ promise.then(<span class="keyword">function</span>(value)&#123;</span><br><span class="line">    //success</span><br><span class="line">    &#125;,<span class="keyword">function</span>(error)&#123;</span><br><span class="line">    //failure</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>二、使用Promise分别获取图片的宽高<br>  new Promise实例，而且要return，new Promise时要传入函数，函数有resolve reject两个参数，成功时执行resolve（）、失败时执行reject（）、<br>then监听结果  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">function</span> <span class="function"><span class="title">loadImg</span></span>()&#123;</span><br><span class="line">    const promise = new Promise(<span class="keyword">function</span>(resolve,reject)&#123;</span><br><span class="line">      var img = document.createElement(<span class="string">'img'</span>)</span><br><span class="line">      img.onload = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        resolve(img)</span><br><span class="line">      &#125;</span><br><span class="line">      img.<span class="function"><span class="title">onerror</span></span>()&#123;</span><br><span class="line">        reject()</span><br><span class="line">      &#125;</span><br><span class="line">      img.src = src</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="built_in">return</span> promise</span><br><span class="line">&#125;</span><br><span class="line">var src = <span class="string">'https://www.imooc.com/static/img/index/logo.png'</span></span><br><span class="line">var result = loadImg(src)</span><br><span class="line">//获取图片的宽度</span><br><span class="line">result.then(<span class="keyword">function</span>(img)&#123;</span><br><span class="line">  console.log(img.width)</span><br><span class="line">&#125;,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">  console.log(<span class="string">'failed'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">//获取图片的高度</span><br><span class="line">result.then(<span class="keyword">function</span>(img)&#123;</span><br><span class="line">  console.log(img.height)</span><br><span class="line">&#125;,<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">  console.log(<span class="string">'failed'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript、Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Github Pages + Yelee主题 + 阿里云域名搭建个人博客</title>
      <link href="/2019/06/19/hello-world/"/>
      <url>/2019/06/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Hexo 常用命令</p><a id="more"></a><h3 id="一、Create-a-new-post-–创建新文章"><a href="#一、Create-a-new-post-–创建新文章" class="headerlink" title="一、Create a new post –创建新文章"></a>一、Create a new post –创建新文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><h3 id="二、Create-a-new-page-–创建新页面"><a href="#二、Create-a-new-page-–创建新页面" class="headerlink" title="二、Create a new page –创建新页面"></a>二、Create a new page –创建新页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page <span class="string">"pageName"</span></span><br></pre></td></tr></table></figure><h3 id="三、Run-server-–启动服务器"><a href="#三、Run-server-–启动服务器" class="headerlink" title="三、Run server –启动服务器"></a>三、Run server –启动服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server  简写：hexo s</span><br></pre></td></tr></table></figure><h3 id="四、Generate-static-files-–生成静态文件"><a href="#四、Generate-static-files-–生成静态文件" class="headerlink" title="四、Generate static files –生成静态文件"></a>四、Generate static files –生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate --生成静态文件   简写： hexo g</span><br></pre></td></tr></table></figure><h3 id="五、Deploy-to-remote-sites-–部署到远程站点"><a href="#五、Deploy-to-remote-sites-–部署到远程站点" class="headerlink" title="五、Deploy to remote sites –部署到远程站点"></a>五、Deploy to remote sites –部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy --部署文章   简写：hexo d</span><br></pre></td></tr></table></figure><h3 id="六、hexo常用命令"><a href="#六、hexo常用命令" class="headerlink" title="六、hexo常用命令"></a>六、hexo常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page <span class="string">"pageName"</span>  <span class="comment">#新建页面</span></span><br><span class="line">$ hexo new <span class="string">"postName"</span>   <span class="comment">#新建页面</span></span><br><span class="line">$ hexo generate  <span class="comment">#生成静态页面至public目录  简写：hexo g</span></span><br><span class="line">$ hexo server  <span class="comment">#开始预览访问端口（默认端口4000，Ctrl + C终止server） 简写：hexo s</span></span><br><span class="line">$ hexo deploy  <span class="comment">#部署到GitHub 简写：hexo d</span></span><br></pre></td></tr></table></figure><h3 id="七、Github根目录下创建CNAME文件（无后缀）"><a href="#七、Github根目录下创建CNAME文件（无后缀）" class="headerlink" title="七、Github根目录下创建CNAME文件（无后缀）"></a>七、Github根目录下创建CNAME文件（无后缀）</h3><p>在CNAME文件里面填写我的域名（加不加www看自己的喜好），下面是我的Github根目录下创建的CANAME文件。<br>阿里云域名解析过程不详细赘述……</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xiaoyucode.top</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
